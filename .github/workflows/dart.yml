# Flutter CI/CD Workflow
# This workflow handles the CI/CD pipeline for the Flutter Expense Tracker app
# Including testing, building, and deployment for both Android and iOS platforms

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flutter CI/CD

# Trigger the workflow on push and pull request events for the main branch
on:
  # Manual trigger with input parameters
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      run_tests:
        description: 'Run Tests'
        required: true
        default: true
        type: boolean
      create_release:
        description: 'Create Release'
        required: true
        default: false
        type: boolean
  
  # Automatic trigger for main branch
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.gitattributes'
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.gitattributes'

# Environment variables used across jobs
env:
  FLUTTER_VERSION: '3.16.0'
  XCODE_VERSION: '15.2.0'

permissions:
  contents: write
  packages: write 
  
jobs:
  # Quality checks and testing
  test:
    name: Quality Checks & Testing
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Format code
        run: dart format .

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: flutter analyze --no-fatal-infos

      - name: Check if test directory exists
        id: check_tests
        run: |
          if [ -d "test" ]; then
            echo "::set-output name=has_tests::true"
          else
            echo "::set-output name=has_tests::false"
          fi

      - name: Run tests with coverage
        if: steps.check_tests.outputs.has_tests == 'true'
        run: flutter test --coverage

      - name: Upload coverage reports
        if: steps.check_tests.outputs.has_tests == 'true'
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Android build job
  build_android:
    name: Build Android App
    needs: test
    if: ${{ always() && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Initialize Android project
        run: |
          # Initialize Android platform
          flutter create --platforms=android .
          
          # Restore original lib directory
          rm -rf lib
          git checkout lib/
          
          # Restore pubspec.yaml
          git checkout pubspec.yaml
          
          # Get dependencies
          flutter pub get

      # Build different variants of the app
      - name: Build Android Debug APK
        if: ${{ github.event.inputs.build_type == 'debug' || github.event_name != 'workflow_dispatch' }}
        run: flutter build apk --debug

      - name: Build Android Release APK
        if: ${{ github.event.inputs.build_type == 'release' || github.event_name != 'workflow_dispatch' }}
        run: flutter build apk --release

      - name: Build Android App Bundle
        if: ${{ github.event.inputs.build_type == 'release' || github.event_name != 'workflow_dispatch' }}
        run: flutter build appbundle --release

      # Verify build artifacts exist
      - name: List build artifacts
        run: |
          ls -R build/app/outputs/flutter-apk/
          ls -R build/app/outputs/bundle/release/

      # Create a tag for the release
      - name: Create tag
        run: |
          VERSION=$(date +'v%Y.%m.%d-%H%M')
          echo "RELEASE_TAG=$VERSION" >> $GITHUB_ENV
          git tag $VERSION
          git push origin $VERSION

      # Create Release
      - name: Create Release
        if: ${{ github.event.inputs.create_release == 'true' || github.event_name != 'workflow_dispatch' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          tag_name: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
          generate_release_notes: true

  # iOS build job
  build_ios:
    name: Build iOS App
    needs: test
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install dependencies
        run: |
          flutter pub get
          cd ios && pod install && cd ..

      # Build different variants of the app
      - name: Build iOS Debug
        run: flutter build ios --debug --no-codesign

      - name: Build iOS Release
        run: flutter build ios --release --no-codesign

      # Archive the build outputs
      - name: Archive iOS Build
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: build/ios/iphoneos

  # Deploy job (only runs on main branch pushes)
  deploy:
    name: Deploy Apps
    needs: [build_android, build_ios]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Download artifacts from previous jobs
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      # Optional: Deploy to Play Store (commented out as it requires setup)
      # - name: Deploy to Play Store
      #   uses: r0adkll/upload-google-play@v1
      #   with:
      #     serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
      #     packageName: com.yourcompany.expensetracker
      #     releaseFiles: release-bundle/app-release.aab
      #     track: production

      # Optional: Deploy to App Store (commented out as it requires setup)
      # - name: Deploy to App Store
      #   uses: apple-actions/upload-testflight-build@v1
      #   with:
      #     app-path: ios-build/Runner.ipa
      #     api-key: ${{ secrets.APPSTORE_API_KEY }}
      #     api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
      #     api-issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}

# Add notifications for workflow completion
  # notify:
  #   name: Notify Team
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   if: always()
    #steps:
      # Slack notification (commented out)
      # - name: Send Slack Notification
      #   uses: 8398a7/action-slack@v3
      #   if: always()
      #   with:
      #     status: custom
      #     fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      #     custom_payload: |
      #       {
      #         "attachments": [{
      #           "color": "${{ job.status == 'success' && 'good' || job.status == 'failure' && 'danger' || 'warning' }}",
      #           "text": "Flutter Expense Tracker: ${{ job.status == 'success' && ':white_check_mark:' || ':x:' }} ${{ github.workflow }} completed with status ${{ job.status }}\nCommit: ${{ github.event.head_commit.message }}"
      #         }]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Email notification
      # - name: Send Email Notification
      #   uses: dawidd6/action-send-mail@v3
      #   if: always()
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 465
      #     username: ${{ secrets.EMAIL_USERNAME }}
      #     password: ${{ secrets.EMAIL_PASSWORD }}
      #     subject: "Flutter Expense Tracker Build ${{ job.status == 'success' && '✅' || '❌' }}"
      #     body: |
      #       Build Status: ${{ job.status }}
            
      #       Repository: ${{ github.repository }}
      #       Branch: ${{ github.ref }}
      #       Commit: ${{ github.event.head_commit.message }}
            
      #       Workflow: ${{ github.workflow }}
      #       Run Number: ${{ github.run_number }}
            
      #       View the run details here:
      #       ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      #     to: ${{ secrets.EMAIL_TO }}
      #     from: GitHub Actions
